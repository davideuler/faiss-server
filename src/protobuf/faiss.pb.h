// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faiss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_faiss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_faiss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_faiss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_faiss_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_faiss_2eproto;
namespace faiss {
class HeartbeatResponse;
struct HeartbeatResponseDefaultTypeInternal;
extern HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
class Neighbor;
struct NeighborDefaultTypeInternal;
extern NeighborDefaultTypeInternal _Neighbor_default_instance_;
class SearchByIdRequest;
struct SearchByIdRequestDefaultTypeInternal;
extern SearchByIdRequestDefaultTypeInternal _SearchByIdRequest_default_instance_;
class SearchByIdResponse;
struct SearchByIdResponseDefaultTypeInternal;
extern SearchByIdResponseDefaultTypeInternal _SearchByIdResponse_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace faiss
PROTOBUF_NAMESPACE_OPEN
template<> ::faiss::HeartbeatResponse* Arena::CreateMaybeMessage<::faiss::HeartbeatResponse>(Arena*);
template<> ::faiss::Neighbor* Arena::CreateMaybeMessage<::faiss::Neighbor>(Arena*);
template<> ::faiss::SearchByIdRequest* Arena::CreateMaybeMessage<::faiss::SearchByIdRequest>(Arena*);
template<> ::faiss::SearchByIdResponse* Arena::CreateMaybeMessage<::faiss::SearchByIdResponse>(Arena*);
template<> ::faiss::SearchRequest* Arena::CreateMaybeMessage<::faiss::SearchRequest>(Arena*);
template<> ::faiss::SearchResponse* Arena::CreateMaybeMessage<::faiss::SearchResponse>(Arena*);
template<> ::faiss::Vector* Arena::CreateMaybeMessage<::faiss::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace faiss {

// ===================================================================

class HeartbeatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.HeartbeatResponse) */ {
 public:
  inline HeartbeatResponse() : HeartbeatResponse(nullptr) {}
  ~HeartbeatResponse() override;
  explicit PROTOBUF_CONSTEXPR HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatResponse(const HeartbeatResponse& from);
  HeartbeatResponse(HeartbeatResponse&& from) noexcept
    : HeartbeatResponse() {
    *this = ::std::move(from);
  }

  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatResponse& operator=(HeartbeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartbeatResponse*>(
               &_HeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HeartbeatResponse& a, HeartbeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartbeatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartbeatResponse& from) {
    HeartbeatResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.HeartbeatResponse";
  }
  protected:
  explicit HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:faiss.HeartbeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  ~Vector() override;
  explicit PROTOBUF_CONSTEXPR Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector& from) {
    Vector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValFieldNumber = 5,
  };
  // repeated float float_val = 5;
  int float_val_size() const;
  private:
  int _internal_float_val_size() const;
  public:
  void clear_float_val();
  private:
  float _internal_float_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_val() const;
  void _internal_add_float_val(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_val();
  public:
  float float_val(int index) const;
  void set_float_val(int index, float value);
  void add_float_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_val();

  // @@protoc_insertion_point(class_scope:faiss.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchRequest& from) {
    SearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kTopKFieldNumber = 2,
  };
  // .faiss.Vector vector = 1;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::faiss::Vector& vector() const;
  PROTOBUF_NODISCARD ::faiss::Vector* release_vector();
  ::faiss::Vector* mutable_vector();
  void set_allocated_vector(::faiss::Vector* vector);
  private:
  const ::faiss::Vector& _internal_vector() const;
  ::faiss::Vector* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::faiss::Vector* vector);
  ::faiss::Vector* unsafe_arena_release_vector();

  // uint64 top_k = 2;
  void clear_top_k();
  uint64_t top_k() const;
  void set_top_k(uint64_t value);
  private:
  uint64_t _internal_top_k() const;
  void _internal_set_top_k(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:faiss.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::faiss::Vector* vector_;
    uint64_t top_k_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class Neighbor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.Neighbor) */ {
 public:
  inline Neighbor() : Neighbor(nullptr) {}
  ~Neighbor() override;
  explicit PROTOBUF_CONSTEXPR Neighbor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Neighbor(const Neighbor& from);
  Neighbor(Neighbor&& from) noexcept
    : Neighbor() {
    *this = ::std::move(from);
  }

  inline Neighbor& operator=(const Neighbor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Neighbor& operator=(Neighbor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Neighbor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Neighbor* internal_default_instance() {
    return reinterpret_cast<const Neighbor*>(
               &_Neighbor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Neighbor& a, Neighbor& b) {
    a.Swap(&b);
  }
  inline void Swap(Neighbor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Neighbor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Neighbor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Neighbor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Neighbor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Neighbor& from) {
    Neighbor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neighbor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.Neighbor";
  }
  protected:
  explicit Neighbor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:faiss.Neighbor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    float score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResponse& from) {
    SearchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborsFieldNumber = 2,
  };
  // repeated .faiss.Neighbor neighbors = 2;
  int neighbors_size() const;
  private:
  int _internal_neighbors_size() const;
  public:
  void clear_neighbors();
  ::faiss::Neighbor* mutable_neighbors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >*
      mutable_neighbors();
  private:
  const ::faiss::Neighbor& _internal_neighbors(int index) const;
  ::faiss::Neighbor* _internal_add_neighbors();
  public:
  const ::faiss::Neighbor& neighbors(int index) const;
  ::faiss::Neighbor* add_neighbors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >&
      neighbors() const;

  // @@protoc_insertion_point(class_scope:faiss.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor > neighbors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class SearchByIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.SearchByIdRequest) */ {
 public:
  inline SearchByIdRequest() : SearchByIdRequest(nullptr) {}
  ~SearchByIdRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchByIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchByIdRequest(const SearchByIdRequest& from);
  SearchByIdRequest(SearchByIdRequest&& from) noexcept
    : SearchByIdRequest() {
    *this = ::std::move(from);
  }

  inline SearchByIdRequest& operator=(const SearchByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByIdRequest& operator=(SearchByIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchByIdRequest* internal_default_instance() {
    return reinterpret_cast<const SearchByIdRequest*>(
               &_SearchByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SearchByIdRequest& a, SearchByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchByIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchByIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchByIdRequest& from) {
    SearchByIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.SearchByIdRequest";
  }
  protected:
  explicit SearchByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTopKFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 top_k = 2;
  void clear_top_k();
  uint64_t top_k() const;
  void set_top_k(uint64_t value);
  private:
  uint64_t _internal_top_k() const;
  void _internal_set_top_k(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:faiss.SearchByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    uint64_t top_k_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class SearchByIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.SearchByIdResponse) */ {
 public:
  inline SearchByIdResponse() : SearchByIdResponse(nullptr) {}
  ~SearchByIdResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchByIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchByIdResponse(const SearchByIdResponse& from);
  SearchByIdResponse(SearchByIdResponse&& from) noexcept
    : SearchByIdResponse() {
    *this = ::std::move(from);
  }

  inline SearchByIdResponse& operator=(const SearchByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByIdResponse& operator=(SearchByIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchByIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchByIdResponse* internal_default_instance() {
    return reinterpret_cast<const SearchByIdResponse*>(
               &_SearchByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SearchByIdResponse& a, SearchByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchByIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchByIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchByIdResponse& from) {
    SearchByIdResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByIdResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.SearchByIdResponse";
  }
  protected:
  explicit SearchByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .faiss.Neighbor neighbors = 2;
  int neighbors_size() const;
  private:
  int _internal_neighbors_size() const;
  public:
  void clear_neighbors();
  ::faiss::Neighbor* mutable_neighbors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >*
      mutable_neighbors();
  private:
  const ::faiss::Neighbor& _internal_neighbors(int index) const;
  ::faiss::Neighbor* _internal_add_neighbors();
  public:
  const ::faiss::Neighbor& neighbors(int index) const;
  ::faiss::Neighbor* add_neighbors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >&
      neighbors() const;

  // uint64 request_id = 1;
  void clear_request_id();
  uint64_t request_id() const;
  void set_request_id(uint64_t value);
  private:
  uint64_t _internal_request_id() const;
  void _internal_set_request_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:faiss.SearchByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor > neighbors_;
    uint64_t request_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_faiss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeartbeatResponse

// string message = 1;
inline void HeartbeatResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& HeartbeatResponse::message() const {
  // @@protoc_insertion_point(field_get:faiss.HeartbeatResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HeartbeatResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faiss.HeartbeatResponse.message)
}
inline std::string* HeartbeatResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:faiss.HeartbeatResponse.message)
  return _s;
}
inline const std::string& HeartbeatResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void HeartbeatResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* HeartbeatResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* HeartbeatResponse::release_message() {
  // @@protoc_insertion_point(field_release:faiss.HeartbeatResponse.message)
  return _impl_.message_.Release();
}
inline void HeartbeatResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faiss.HeartbeatResponse.message)
}

// -------------------------------------------------------------------

// Vector

// repeated float float_val = 5;
inline int Vector::_internal_float_val_size() const {
  return _impl_.float_val_.size();
}
inline int Vector::float_val_size() const {
  return _internal_float_val_size();
}
inline void Vector::clear_float_val() {
  _impl_.float_val_.Clear();
}
inline float Vector::_internal_float_val(int index) const {
  return _impl_.float_val_.Get(index);
}
inline float Vector::float_val(int index) const {
  // @@protoc_insertion_point(field_get:faiss.Vector.float_val)
  return _internal_float_val(index);
}
inline void Vector::set_float_val(int index, float value) {
  _impl_.float_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:faiss.Vector.float_val)
}
inline void Vector::_internal_add_float_val(float value) {
  _impl_.float_val_.Add(value);
}
inline void Vector::add_float_val(float value) {
  _internal_add_float_val(value);
  // @@protoc_insertion_point(field_add:faiss.Vector.float_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vector::_internal_float_val() const {
  return _impl_.float_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vector::float_val() const {
  // @@protoc_insertion_point(field_list:faiss.Vector.float_val)
  return _internal_float_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vector::_internal_mutable_float_val() {
  return &_impl_.float_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vector::mutable_float_val() {
  // @@protoc_insertion_point(field_mutable_list:faiss.Vector.float_val)
  return _internal_mutable_float_val();
}

// -------------------------------------------------------------------

// SearchRequest

// .faiss.Vector vector = 1;
inline bool SearchRequest::_internal_has_vector() const {
  return this != internal_default_instance() && _impl_.vector_ != nullptr;
}
inline bool SearchRequest::has_vector() const {
  return _internal_has_vector();
}
inline void SearchRequest::clear_vector() {
  if (GetArenaForAllocation() == nullptr && _impl_.vector_ != nullptr) {
    delete _impl_.vector_;
  }
  _impl_.vector_ = nullptr;
}
inline const ::faiss::Vector& SearchRequest::_internal_vector() const {
  const ::faiss::Vector* p = _impl_.vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::faiss::Vector&>(
      ::faiss::_Vector_default_instance_);
}
inline const ::faiss::Vector& SearchRequest::vector() const {
  // @@protoc_insertion_point(field_get:faiss.SearchRequest.vector)
  return _internal_vector();
}
inline void SearchRequest::unsafe_arena_set_allocated_vector(
    ::faiss::Vector* vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_);
  }
  _impl_.vector_ = vector;
  if (vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faiss.SearchRequest.vector)
}
inline ::faiss::Vector* SearchRequest::release_vector() {
  
  ::faiss::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::faiss::Vector* SearchRequest::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_release:faiss.SearchRequest.vector)
  
  ::faiss::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
  return temp;
}
inline ::faiss::Vector* SearchRequest::_internal_mutable_vector() {
  
  if (_impl_.vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::faiss::Vector>(GetArenaForAllocation());
    _impl_.vector_ = p;
  }
  return _impl_.vector_;
}
inline ::faiss::Vector* SearchRequest::mutable_vector() {
  ::faiss::Vector* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:faiss.SearchRequest.vector)
  return _msg;
}
inline void SearchRequest::set_allocated_vector(::faiss::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vector_;
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vector);
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:faiss.SearchRequest.vector)
}

// uint64 top_k = 2;
inline void SearchRequest::clear_top_k() {
  _impl_.top_k_ = uint64_t{0u};
}
inline uint64_t SearchRequest::_internal_top_k() const {
  return _impl_.top_k_;
}
inline uint64_t SearchRequest::top_k() const {
  // @@protoc_insertion_point(field_get:faiss.SearchRequest.top_k)
  return _internal_top_k();
}
inline void SearchRequest::_internal_set_top_k(uint64_t value) {
  
  _impl_.top_k_ = value;
}
inline void SearchRequest::set_top_k(uint64_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:faiss.SearchRequest.top_k)
}

// -------------------------------------------------------------------

// Neighbor

// uint64 id = 1;
inline void Neighbor::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Neighbor::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Neighbor::id() const {
  // @@protoc_insertion_point(field_get:faiss.Neighbor.id)
  return _internal_id();
}
inline void Neighbor::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Neighbor::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:faiss.Neighbor.id)
}

// float score = 2;
inline void Neighbor::clear_score() {
  _impl_.score_ = 0;
}
inline float Neighbor::_internal_score() const {
  return _impl_.score_;
}
inline float Neighbor::score() const {
  // @@protoc_insertion_point(field_get:faiss.Neighbor.score)
  return _internal_score();
}
inline void Neighbor::_internal_set_score(float value) {
  
  _impl_.score_ = value;
}
inline void Neighbor::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:faiss.Neighbor.score)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .faiss.Neighbor neighbors = 2;
inline int SearchResponse::_internal_neighbors_size() const {
  return _impl_.neighbors_.size();
}
inline int SearchResponse::neighbors_size() const {
  return _internal_neighbors_size();
}
inline void SearchResponse::clear_neighbors() {
  _impl_.neighbors_.Clear();
}
inline ::faiss::Neighbor* SearchResponse::mutable_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:faiss.SearchResponse.neighbors)
  return _impl_.neighbors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >*
SearchResponse::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:faiss.SearchResponse.neighbors)
  return &_impl_.neighbors_;
}
inline const ::faiss::Neighbor& SearchResponse::_internal_neighbors(int index) const {
  return _impl_.neighbors_.Get(index);
}
inline const ::faiss::Neighbor& SearchResponse::neighbors(int index) const {
  // @@protoc_insertion_point(field_get:faiss.SearchResponse.neighbors)
  return _internal_neighbors(index);
}
inline ::faiss::Neighbor* SearchResponse::_internal_add_neighbors() {
  return _impl_.neighbors_.Add();
}
inline ::faiss::Neighbor* SearchResponse::add_neighbors() {
  ::faiss::Neighbor* _add = _internal_add_neighbors();
  // @@protoc_insertion_point(field_add:faiss.SearchResponse.neighbors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >&
SearchResponse::neighbors() const {
  // @@protoc_insertion_point(field_list:faiss.SearchResponse.neighbors)
  return _impl_.neighbors_;
}

// -------------------------------------------------------------------

// SearchByIdRequest

// uint64 id = 1;
inline void SearchByIdRequest::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t SearchByIdRequest::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t SearchByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdRequest.id)
  return _internal_id();
}
inline void SearchByIdRequest::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void SearchByIdRequest::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:faiss.SearchByIdRequest.id)
}

// uint64 top_k = 2;
inline void SearchByIdRequest::clear_top_k() {
  _impl_.top_k_ = uint64_t{0u};
}
inline uint64_t SearchByIdRequest::_internal_top_k() const {
  return _impl_.top_k_;
}
inline uint64_t SearchByIdRequest::top_k() const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdRequest.top_k)
  return _internal_top_k();
}
inline void SearchByIdRequest::_internal_set_top_k(uint64_t value) {
  
  _impl_.top_k_ = value;
}
inline void SearchByIdRequest::set_top_k(uint64_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:faiss.SearchByIdRequest.top_k)
}

// -------------------------------------------------------------------

// SearchByIdResponse

// uint64 request_id = 1;
inline void SearchByIdResponse::clear_request_id() {
  _impl_.request_id_ = uint64_t{0u};
}
inline uint64_t SearchByIdResponse::_internal_request_id() const {
  return _impl_.request_id_;
}
inline uint64_t SearchByIdResponse::request_id() const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdResponse.request_id)
  return _internal_request_id();
}
inline void SearchByIdResponse::_internal_set_request_id(uint64_t value) {
  
  _impl_.request_id_ = value;
}
inline void SearchByIdResponse::set_request_id(uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:faiss.SearchByIdResponse.request_id)
}

// repeated .faiss.Neighbor neighbors = 2;
inline int SearchByIdResponse::_internal_neighbors_size() const {
  return _impl_.neighbors_.size();
}
inline int SearchByIdResponse::neighbors_size() const {
  return _internal_neighbors_size();
}
inline void SearchByIdResponse::clear_neighbors() {
  _impl_.neighbors_.Clear();
}
inline ::faiss::Neighbor* SearchByIdResponse::mutable_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:faiss.SearchByIdResponse.neighbors)
  return _impl_.neighbors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >*
SearchByIdResponse::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:faiss.SearchByIdResponse.neighbors)
  return &_impl_.neighbors_;
}
inline const ::faiss::Neighbor& SearchByIdResponse::_internal_neighbors(int index) const {
  return _impl_.neighbors_.Get(index);
}
inline const ::faiss::Neighbor& SearchByIdResponse::neighbors(int index) const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdResponse.neighbors)
  return _internal_neighbors(index);
}
inline ::faiss::Neighbor* SearchByIdResponse::_internal_add_neighbors() {
  return _impl_.neighbors_.Add();
}
inline ::faiss::Neighbor* SearchByIdResponse::add_neighbors() {
  ::faiss::Neighbor* _add = _internal_add_neighbors();
  // @@protoc_insertion_point(field_add:faiss.SearchByIdResponse.neighbors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >&
SearchByIdResponse::neighbors() const {
  // @@protoc_insertion_point(field_list:faiss.SearchByIdResponse.neighbors)
  return _impl_.neighbors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace faiss

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_faiss_2eproto
