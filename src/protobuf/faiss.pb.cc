// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faiss.proto

#include "faiss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace faiss {
PROTOBUF_CONSTEXPR HeartbeatResponse::HeartbeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatResponseDefaultTypeInternal() {}
  union {
    HeartbeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
PROTOBUF_CONSTEXPR Vector::Vector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.float_val_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorDefaultTypeInternal() {}
  union {
    Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorDefaultTypeInternal _Vector_default_instance_;
PROTOBUF_CONSTEXPR SearchRequest::SearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vector_)*/nullptr
  , /*decltype(_impl_.top_k_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRequestDefaultTypeInternal() {}
  union {
    SearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
PROTOBUF_CONSTEXPR Neighbor::Neighbor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NeighborDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NeighborDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NeighborDefaultTypeInternal() {}
  union {
    Neighbor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NeighborDefaultTypeInternal _Neighbor_default_instance_;
PROTOBUF_CONSTEXPR SearchResponse::SearchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.neighbors_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchResponseDefaultTypeInternal() {}
  union {
    SearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
PROTOBUF_CONSTEXPR SearchByIdRequest::SearchByIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.top_k_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchByIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchByIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchByIdRequestDefaultTypeInternal() {}
  union {
    SearchByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchByIdRequestDefaultTypeInternal _SearchByIdRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchByIdResponse::SearchByIdResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.neighbors_)*/{}
  , /*decltype(_impl_.request_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchByIdResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchByIdResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchByIdResponseDefaultTypeInternal() {}
  union {
    SearchByIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchByIdResponseDefaultTypeInternal _SearchByIdResponse_default_instance_;
}  // namespace faiss
static ::_pb::Metadata file_level_metadata_faiss_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_faiss_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_faiss_2eproto = nullptr;

const uint32_t TableStruct_faiss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faiss::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faiss::HeartbeatResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faiss::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faiss::Vector, _impl_.float_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faiss::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faiss::SearchRequest, _impl_.vector_),
  PROTOBUF_FIELD_OFFSET(::faiss::SearchRequest, _impl_.top_k_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faiss::Neighbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faiss::Neighbor, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::faiss::Neighbor, _impl_.score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faiss::SearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faiss::SearchResponse, _impl_.neighbors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faiss::SearchByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faiss::SearchByIdRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::faiss::SearchByIdRequest, _impl_.top_k_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faiss::SearchByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faiss::SearchByIdResponse, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::faiss::SearchByIdResponse, _impl_.neighbors_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::faiss::HeartbeatResponse)},
  { 7, -1, -1, sizeof(::faiss::Vector)},
  { 14, -1, -1, sizeof(::faiss::SearchRequest)},
  { 22, -1, -1, sizeof(::faiss::Neighbor)},
  { 30, -1, -1, sizeof(::faiss::SearchResponse)},
  { 37, -1, -1, sizeof(::faiss::SearchByIdRequest)},
  { 45, -1, -1, sizeof(::faiss::SearchByIdResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::faiss::_HeartbeatResponse_default_instance_._instance,
  &::faiss::_Vector_default_instance_._instance,
  &::faiss::_SearchRequest_default_instance_._instance,
  &::faiss::_Neighbor_default_instance_._instance,
  &::faiss::_SearchResponse_default_instance_._instance,
  &::faiss::_SearchByIdRequest_default_instance_._instance,
  &::faiss::_SearchByIdResponse_default_instance_._instance,
};

const char descriptor_table_protodef_faiss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013faiss.proto\022\005faiss\032\033google/protobuf/em"
  "pty.proto\"$\n\021HeartbeatResponse\022\017\n\007messag"
  "e\030\001 \001(\t\"\033\n\006Vector\022\021\n\tfloat_val\030\005 \003(\002\"=\n\r"
  "SearchRequest\022\035\n\006vector\030\001 \001(\0132\r.faiss.Ve"
  "ctor\022\r\n\005top_k\030\002 \001(\004\"%\n\010Neighbor\022\n\n\002id\030\001 "
  "\001(\004\022\r\n\005score\030\002 \001(\002\"4\n\016SearchResponse\022\"\n\t"
  "neighbors\030\002 \003(\0132\017.faiss.Neighbor\".\n\021Sear"
  "chByIdRequest\022\n\n\002id\030\001 \001(\004\022\r\n\005top_k\030\002 \001(\004"
  "\"L\n\022SearchByIdResponse\022\022\n\nrequest_id\030\001 \001"
  "(\004\022\"\n\tneighbors\030\002 \003(\0132\017.faiss.Neighbor2\307"
  "\001\n\014FaissService\022=\n\tHeartbeat\022\026.google.pr"
  "otobuf.Empty\032\030.faiss.HeartbeatResponse\0225"
  "\n\006Search\022\024.faiss.SearchRequest\032\025.faiss.S"
  "earchResponse\022A\n\nSearchById\022\030.faiss.Sear"
  "chByIdRequest\032\031.faiss.SearchByIdResponse"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_faiss_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_faiss_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_faiss_2eproto = {
    false, false, 608, descriptor_table_protodef_faiss_2eproto,
    "faiss.proto",
    &descriptor_table_faiss_2eproto_once, descriptor_table_faiss_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_faiss_2eproto::offsets,
    file_level_metadata_faiss_2eproto, file_level_enum_descriptors_faiss_2eproto,
    file_level_service_descriptors_faiss_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_faiss_2eproto_getter() {
  return &descriptor_table_faiss_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_faiss_2eproto(&descriptor_table_faiss_2eproto);
namespace faiss {

// ===================================================================

class HeartbeatResponse::_Internal {
 public:
};

HeartbeatResponse::HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:faiss.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:faiss.HeartbeatResponse)
}

inline void HeartbeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:faiss.HeartbeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void HeartbeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faiss.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "faiss.HeartbeatResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faiss.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faiss.HeartbeatResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faiss.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faiss.HeartbeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatResponse::GetClassData() const { return &_class_data_; }


void HeartbeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatResponse*>(&to_msg);
  auto& from = static_cast<const HeartbeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:faiss.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faiss.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  return true;
}

void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_faiss_2eproto_getter, &descriptor_table_faiss_2eproto_once,
      file_level_metadata_faiss_2eproto[0]);
}

// ===================================================================

class Vector::_Internal {
 public:
};

Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:faiss.Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.float_val_){from._impl_.float_val_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faiss.Vector)
}

inline void Vector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.float_val_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:faiss.Vector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.float_val_.~RepeatedField();
}

void Vector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:faiss.Vector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.float_val_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float float_val = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_float_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faiss.Vector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float float_val = 5;
  if (this->_internal_float_val_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_float_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faiss.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faiss.Vector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_val = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector::GetClassData() const { return &_class_data_; }


void Vector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector*>(&to_msg);
  auto& from = static_cast<const Vector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:faiss.Vector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.float_val_.MergeFrom(from._impl_.float_val_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faiss.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.float_val_.InternalSwap(&other->_impl_.float_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_faiss_2eproto_getter, &descriptor_table_faiss_2eproto_once,
      file_level_metadata_faiss_2eproto[1]);
}

// ===================================================================

class SearchRequest::_Internal {
 public:
  static const ::faiss::Vector& vector(const SearchRequest* msg);
};

const ::faiss::Vector&
SearchRequest::_Internal::vector(const SearchRequest* msg) {
  return *msg->_impl_.vector_;
}
SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:faiss.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_){nullptr}
    , decltype(_impl_.top_k_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vector()) {
    _this->_impl_.vector_ = new ::faiss::Vector(*from._impl_.vector_);
  }
  _this->_impl_.top_k_ = from._impl_.top_k_;
  // @@protoc_insertion_point(copy_constructor:faiss.SearchRequest)
}

inline void SearchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_){nullptr}
    , decltype(_impl_.top_k_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:faiss.SearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vector_;
}

void SearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faiss.SearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.vector_ != nullptr) {
    delete _impl_.vector_;
  }
  _impl_.vector_ = nullptr;
  _impl_.top_k_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .faiss.Vector vector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 top_k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faiss.SearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .faiss.Vector vector = 1;
  if (this->_internal_has_vector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vector(this),
        _Internal::vector(this).GetCachedSize(), target, stream);
  }

  // uint64 top_k = 2;
  if (this->_internal_top_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_top_k(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faiss.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faiss.SearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .faiss.Vector vector = 1;
  if (this->_internal_has_vector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vector_);
  }

  // uint64 top_k = 2;
  if (this->_internal_top_k() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_top_k());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRequest::GetClassData() const { return &_class_data_; }


void SearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchRequest*>(&to_msg);
  auto& from = static_cast<const SearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:faiss.SearchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vector()) {
    _this->_internal_mutable_vector()->::faiss::Vector::MergeFrom(
        from._internal_vector());
  }
  if (from._internal_top_k() != 0) {
    _this->_internal_set_top_k(from._internal_top_k());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faiss.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.top_k_)
      + sizeof(SearchRequest::_impl_.top_k_)
      - PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.vector_)>(
          reinterpret_cast<char*>(&_impl_.vector_),
          reinterpret_cast<char*>(&other->_impl_.vector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_faiss_2eproto_getter, &descriptor_table_faiss_2eproto_once,
      file_level_metadata_faiss_2eproto[2]);
}

// ===================================================================

class Neighbor::_Internal {
 public:
};

Neighbor::Neighbor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:faiss.Neighbor)
}
Neighbor::Neighbor(const Neighbor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Neighbor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:faiss.Neighbor)
}

inline void Neighbor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Neighbor::~Neighbor() {
  // @@protoc_insertion_point(destructor:faiss.Neighbor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Neighbor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Neighbor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Neighbor::Clear() {
// @@protoc_insertion_point(message_clear_start:faiss.Neighbor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Neighbor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Neighbor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faiss.Neighbor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // float score = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faiss.Neighbor)
  return target;
}

size_t Neighbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faiss.Neighbor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // float score = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Neighbor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Neighbor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Neighbor::GetClassData() const { return &_class_data_; }


void Neighbor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Neighbor*>(&to_msg);
  auto& from = static_cast<const Neighbor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:faiss.Neighbor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Neighbor::CopyFrom(const Neighbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faiss.Neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neighbor::IsInitialized() const {
  return true;
}

void Neighbor::InternalSwap(Neighbor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Neighbor, _impl_.score_)
      + sizeof(Neighbor::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(Neighbor, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Neighbor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_faiss_2eproto_getter, &descriptor_table_faiss_2eproto_once,
      file_level_metadata_faiss_2eproto[3]);
}

// ===================================================================

class SearchResponse::_Internal {
 public:
};

SearchResponse::SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:faiss.SearchResponse)
}
SearchResponse::SearchResponse(const SearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.neighbors_){from._impl_.neighbors_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faiss.SearchResponse)
}

inline void SearchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.neighbors_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:faiss.SearchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.neighbors_.~RepeatedPtrField();
}

void SearchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faiss.SearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.neighbors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .faiss.Neighbor neighbors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neighbors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faiss.SearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .faiss.Neighbor neighbors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_neighbors_size()); i < n; i++) {
    const auto& repfield = this->_internal_neighbors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faiss.SearchResponse)
  return target;
}

size_t SearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faiss.SearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .faiss.Neighbor neighbors = 2;
  total_size += 1UL * this->_internal_neighbors_size();
  for (const auto& msg : this->_impl_.neighbors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchResponse::GetClassData() const { return &_class_data_; }


void SearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchResponse*>(&to_msg);
  auto& from = static_cast<const SearchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:faiss.SearchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.neighbors_.MergeFrom(from._impl_.neighbors_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faiss.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  return true;
}

void SearchResponse::InternalSwap(SearchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.neighbors_.InternalSwap(&other->_impl_.neighbors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_faiss_2eproto_getter, &descriptor_table_faiss_2eproto_once,
      file_level_metadata_faiss_2eproto[4]);
}

// ===================================================================

class SearchByIdRequest::_Internal {
 public:
};

SearchByIdRequest::SearchByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:faiss.SearchByIdRequest)
}
SearchByIdRequest::SearchByIdRequest(const SearchByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchByIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.top_k_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.top_k_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.top_k_));
  // @@protoc_insertion_point(copy_constructor:faiss.SearchByIdRequest)
}

inline void SearchByIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.top_k_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchByIdRequest::~SearchByIdRequest() {
  // @@protoc_insertion_point(destructor:faiss.SearchByIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SearchByIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faiss.SearchByIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.top_k_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.top_k_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchByIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 top_k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchByIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faiss.SearchByIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 top_k = 2;
  if (this->_internal_top_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_top_k(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faiss.SearchByIdRequest)
  return target;
}

size_t SearchByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faiss.SearchByIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 top_k = 2;
  if (this->_internal_top_k() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_top_k());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchByIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchByIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchByIdRequest::GetClassData() const { return &_class_data_; }


void SearchByIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchByIdRequest*>(&to_msg);
  auto& from = static_cast<const SearchByIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:faiss.SearchByIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_top_k() != 0) {
    _this->_internal_set_top_k(from._internal_top_k());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchByIdRequest::CopyFrom(const SearchByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faiss.SearchByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchByIdRequest::IsInitialized() const {
  return true;
}

void SearchByIdRequest::InternalSwap(SearchByIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchByIdRequest, _impl_.top_k_)
      + sizeof(SearchByIdRequest::_impl_.top_k_)
      - PROTOBUF_FIELD_OFFSET(SearchByIdRequest, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchByIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_faiss_2eproto_getter, &descriptor_table_faiss_2eproto_once,
      file_level_metadata_faiss_2eproto[5]);
}

// ===================================================================

class SearchByIdResponse::_Internal {
 public:
};

SearchByIdResponse::SearchByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:faiss.SearchByIdResponse)
}
SearchByIdResponse::SearchByIdResponse(const SearchByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchByIdResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.neighbors_){from._impl_.neighbors_}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.request_id_ = from._impl_.request_id_;
  // @@protoc_insertion_point(copy_constructor:faiss.SearchByIdResponse)
}

inline void SearchByIdResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.neighbors_){arena}
    , decltype(_impl_.request_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchByIdResponse::~SearchByIdResponse() {
  // @@protoc_insertion_point(destructor:faiss.SearchByIdResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.neighbors_.~RepeatedPtrField();
}

void SearchByIdResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faiss.SearchByIdResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.neighbors_.Clear();
  _impl_.request_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchByIdResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .faiss.Neighbor neighbors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neighbors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchByIdResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faiss.SearchByIdResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_request_id(), target);
  }

  // repeated .faiss.Neighbor neighbors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_neighbors_size()); i < n; i++) {
    const auto& repfield = this->_internal_neighbors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faiss.SearchByIdResponse)
  return target;
}

size_t SearchByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faiss.SearchByIdResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .faiss.Neighbor neighbors = 2;
  total_size += 1UL * this->_internal_neighbors_size();
  for (const auto& msg : this->_impl_.neighbors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 request_id = 1;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchByIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchByIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchByIdResponse::GetClassData() const { return &_class_data_; }


void SearchByIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchByIdResponse*>(&to_msg);
  auto& from = static_cast<const SearchByIdResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:faiss.SearchByIdResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.neighbors_.MergeFrom(from._impl_.neighbors_);
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchByIdResponse::CopyFrom(const SearchByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faiss.SearchByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchByIdResponse::IsInitialized() const {
  return true;
}

void SearchByIdResponse::InternalSwap(SearchByIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.neighbors_.InternalSwap(&other->_impl_.neighbors_);
  swap(_impl_.request_id_, other->_impl_.request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchByIdResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_faiss_2eproto_getter, &descriptor_table_faiss_2eproto_once,
      file_level_metadata_faiss_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace faiss
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::faiss::HeartbeatResponse*
Arena::CreateMaybeMessage< ::faiss::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faiss::HeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faiss::Vector*
Arena::CreateMaybeMessage< ::faiss::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faiss::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::faiss::SearchRequest*
Arena::CreateMaybeMessage< ::faiss::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faiss::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faiss::Neighbor*
Arena::CreateMaybeMessage< ::faiss::Neighbor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faiss::Neighbor >(arena);
}
template<> PROTOBUF_NOINLINE ::faiss::SearchResponse*
Arena::CreateMaybeMessage< ::faiss::SearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faiss::SearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faiss::SearchByIdRequest*
Arena::CreateMaybeMessage< ::faiss::SearchByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faiss::SearchByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faiss::SearchByIdResponse*
Arena::CreateMaybeMessage< ::faiss::SearchByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faiss::SearchByIdResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
